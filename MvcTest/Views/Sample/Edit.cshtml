@model MvcTest.Models.SampleVM
@{ ViewBag.Title = "Edit"; }

<h2>@ViewBag.Title</h2>
@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })
		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.Brand, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.EquipmentId, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.EquipmentId, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.EquipmentId, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.InstalledBy, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicDropDownListFor(model => model.InstalledBy, new SelectList(ViewBag.InstalledByList, "Value", "Text"), "Selecione a instalação", new { @class = "form-control", @style = "min-width: 80px;" })
				@Html.ValidationMessageFor(model => model.InstalledBy, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.Quantity, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.MensalValueStr, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.MensalValueStr, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MensalValueStr, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.MSISDN, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.MSISDN, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.MSISDN, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.PhoneNumber, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.DynamicDisplayNameFor(model => model.Observations, DynamicDisplayType.Label, new { htmlAttributes = new { @class = "control-label col-md-2" } })
			<div class="col-md-10">
				@Html.DynamicEditorFor(model => model.Observations, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Observations, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Save" class="btn btn-default" />
			</div>
		</div>
	</div>
}

<div>
	@Html.ActionLink("Detail", "Details", new { id = 1 }) |
	@Html.DynamicLink(DynamicLinkAction.GoBack, null, "Voltar")
</div>

@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
}